"use strict";


//----------------------------------------------- LESSON 23 ------------------------------------------------------------------

//                           Прототипное наследование, основы обьектно-ориентированного программирования.

// let str = "some";
// let strObj = new String(str); //строка превращается в обьект когда к ней применяются какие то действия
                                            // и превращается назад в строку когда уже подверглась изменениям
 // console.log(typeof(str));
 // console.log(typeof(strObj)); 

// console.dir([1, 2, 3, 5]);


const soldier = {
    health: 400,
    armor: 100,
    sayHello: function() {
        console.log("Hello, boys!");
        }
};

const john = Object.create(soldier); // прототип от soldier и заимствование всех свойств, уже в дальнейшем может иметь свои
                                                              // свойства, которые мы и можем изменить;
// const john = {    
//     health: 100
// };

// john.__proto__ = soldier;   //(!) Метод вывода прото устарел, но прототипное наследование остальных свойств от soldier
                            // таких как armor хотя отображаться при выводе console.log (john); не укажет, но если 
//console.log (john.sayHello);      // написать john.armor выведет значение 100; это и есть прототипное наследование;
// console.log(john.armor);
// Object.setPrototypeOf(john, soldier);  // Современный метод прототипирования свойств и методов для переменных;

john.sayHello();

//----------------------------------------------- LESSON 23 END ----------------------------------------------------------------


















































