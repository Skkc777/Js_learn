"use strict";

//----------------------------------------------- LESSON 19 ------------------------------------------------------------------

//                                           Callback function

// function first() {


//     // выполняется какой-то код или часть кода

//     setTimeout(function() {         // установить выполнение через 0.5 секунды и в этом случае 
//         console.log(1);                                                 //  приоритет идет к функции second
//     }, 500);                    
// }

// function second() {
//     console.log(2);
// }
// first();                // изначально указано на выполнение 1 и потом 2, но иногда нужно сделать наоборот ...
// second();

// ----------------------------------------------

// function learnJs(lang, callback) {
//         console.log(`Я изучаю: ${lang}`);
//         callback();   // говорит о соблюдении действий в функции, то есть когда выполнится первая часть,
// }                    // тогда сможет выполнится и вторая часть... будет ждать до тех пор пока не выполнится порядок действий
//             // в этой функции, пока (`Я изучаю: ${lang}`); не придет дальнейшая часть после callback не отобразится. 

// function done() {
//     console.log('Я прошел этот урок!');
// }                                                   // вызов последовательности функции 

// learnJs('JavaScript', done);

// ------------------------------------------------- или 
//learnJs('JavaScript', function() {
  //  console.log('Я прошел этот урок!');           один из вариантов вызова последовательности
// });    //здесь происходит вызов функции анонимной, из верхней функции.


// --------------------------------------------------- LESSON 19 END -------------------------------------------------------


// --------------------------------------------------- LESSON 20  ---------------------------------------------------------

/*
// const obj = new Object();  <- возможен такой вид использования для создания новых обьектов, но не используется часто.

const options = {               // переменная options которая является вложенным обьектом, в которой расскрываются данные;
    name: 'test',
    width: 1024,
    height: 1024,
    colors: {
           border: 'black',
           bg: 'red'
    }
};


 console.log(Object.keys(options)); // IMPORTANT!!! создает массив с перебором свойств или имен массива KEYS
 console.log(Object.keys(options).length); // !!! так как мы создали виз.массив можем подсчитать количество свойств массива
 //      ВАЖНО!!!                                        который равен 4; так как главных значений 4;



// console.log(options['colors']['border']); //обращению к внутреннему обьекту ключей colors border - и знач. black; редко
// console.log(options.name);    // вывод определенных ключей из обьекта;



// delete options.name; возможно отключение определенных коючей из обьекта; если нужно
// console.log(options); при проверке ключей видно что name не отображается;



// for (let key in options) {
//      console.log(`Свойство ${key} имеет значение ${options[key]}`);
// }  здесь указано что каждое свойство имеет определенное значение и выводит его на консоль;

/* let counter = 0;   // создает переменную которая равна 0 и увеличивается на 1 при подсчете key in options;

for (let key in options) {
    if(typeof(options[key]) === 'object') {
        for (let i in (options[key])) {
            console.log(`Свойство ${i} имеет значение ${options[key][i]}`);
            counter++;  
        } 
        
        } else {
            console.log(`Свойство ${key} имеет значение ${options[key]}`);
            counter++;
    }
    
}
// console.log(counter); 
//       описание к раскрытию обьекта options:   для(создание переменной key=имя свойства в options) {
 // ------------------------------->
//   если(тип-операнд options[свойство]) === обьекту( где раскрыто значение) {
 //       для(создание новой переменной i в options[свойство(если является обьектом)]) {
//            консоль(Свойство название в данном случае обращение к border имеет значение black);
//            консоль(Свойство название в данном случае обращение к bg имеет значение red);
//        }
//           }  еще {
//        консоль(Свойство название в данном случае обращение к названиям(name,width,height) имеет значение test,1024,1024);
//        }
//    }

const options = {               
    name: 'test',
    width: 1024,
    height: 1024,
    colors: {
           border: 'black',
           bg: 'red'
    },
    makeTest: function() {        // Создает метод для решения каких-то определенных задач 
        console.log('Test');
    }
};
options.makeTest(); // запуск функции внутри обьекта

const {border, bg} = options.colors; // диструктуризация обьекта или кода вытаскивание каких-то значений из обьекта
console.log(border);
*/
// --------------------------------------------------- LESSON 20 END ---------------------------------------------------------


// --------------------------------------------------- LESSON 21 -----------------------------------------------------------

                //                              МАССИВЫ И ПСЕВДОМАССИВЫ;

    // const arr = [1, 2, 5, 6, 8, 10];
    
    // arr.forEach(function(item, i, arr) {              //метод дляВсех создает функ. со значением, порядковым индексом и самим
    //     console.log(`${i}: ${item} внутри массива ${arr}`);             // массивом, и позволяет вывести на консоль;
    // });                        // нельзя использовать break, continue; 

    // arr[99] = 0;
    // console.log(arr.length);      // создание пустых ячеек массива, нежелательно так делать
    // console.log(arr);

   // arr.pop();  // удаляет последний элемент из нашего массива 
   // arr.push(10); // добавляет элемент в массив с новым знач. 

//    for(i = 0; i < arr.length; i++) {
//        console.log(arr[i]);             // перебор элементов массива и вывод на консоль
//    }
//     console.log(arr);

//    for(let value of arr) {                     // создает переменную также для перебора массива и вывода на консоль
//  console.log(value);                   // также для перебора массива, элементов страницы и псевдоэлементов, но не обьектов!
//    }

const str = prompt('', '');
const product = str.split(', ');
product.sort(); // сортировка данных по Алфавитному значению a,b,c,d,e,f oth...;
// console.log(product);  // вывод значений через запятую в виде массива(array)
console.log(product.join('; '));  // получение данных в виде строчных данных

const arr = [1, 21, 51, 61, 82, 102];
arr.sort(compareNum);    // вызов функции compareNum <---
console.log(arr);

function compareNum(a, b) {
    return a - b;               // логика такова что за счет функции compareFunction устанавливает значение цифр по порядку
                                  // чтоб понять работу функции надо углубиться в Js;
}


// Понятие псевдомассив заключается в том что выглядит как массив, но применить к нему Методы нельзя;
// -------------------------------------------------- LESSON 21 END -----------------------------------------------------------

































