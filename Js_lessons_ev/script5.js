"use strict";


//----------------------------------------------- LESSON 23 ------------------------------------------------------------------

//                           Прототипное наследование, основы обьектно-ориентированного программирования.

// let str = "some";
// let strObj = new String(str); //строка превращается в обьект когда к ней применяются какие то действия
                                            // и превращается назад в строку когда уже подверглась изменениям
 // console.log(typeof(str));
 // console.log(typeof(strObj)); 

// console.dir([1, 2, 3, 5]);


// const soldier = {
//     health: 400,
//     armor: 100,
//     sayHello: function() {
//         console.log("Hello, boys!");
//         }
// };

// const john = Object.create(soldier); // прототип от soldier и заимствование всех свойств, уже в дальнейшем может иметь свои
                                                              // свойства, которые мы и можем изменить;
// const john = {    
//     health: 100
// };

// john.__proto__ = soldier;   //(!) Метод вывода прото устарел, но прототипное наследование остальных свойств от soldier
                            // таких как armor хотя отображаться при выводе console.log (john); не укажет, но если 
//console.log (john.sayHello);      // написать john.armor выведет значение 100; это и есть прототипное наследование;
// console.log(john.armor);
// Object.setPrototypeOf(john, soldier);  // Современный метод прототипирования свойств и методов для переменных;

// john.sayHello();

//----------------------------------------------- LESSON 23 END ----------------------------------------------------------------


//----------------------------------------------- LESSON 24    ----------------------------------------------------------------

                                // Динамическая типизация Js

   // To string превращение в строку
   
   // variant 1 

   console.log(typeof(String(null)));  // Любой элемент превращает в строчные данные редко используется


   // variant 2
   
   console.log(typeof(null + ''));  // + "" превращает в строку
   
   
   const num = 5; 

   console.log('https://vk.com/catalog/' + num); // переводит в знач строки

   const fontSize = 26 + 'px';  
//------------------------------------------------------------

   // превращение в число toNumber 1 способ

   console.log(typeof(Number('5')));      // редко пользуются


// 2 способ 

console.log(typeof(+'5'));  // унарный плюс меняет значение строки в цифру


// 3 способ 
console.log(typeof(parseInt('15px', 10))); // перевод в 10-ую систему 
   

   let answ = +prompt('How much?', '');

//------------------------------------------------------------

// to boolean true or false

// всегда превращается в false  -         0, '' пустая строка, null, undefined, NaN; 
// все остальное превращается в true;

// 1 способ преобразования в булеан
let switcher = null;

if (switcher) {
    console.log('working...');
}

switcher = 1;

if (switcher) {
    console.log('working...');
}

// 2 способ преобразования в булеан

console.log(typeof(Boolean('5')));

// 3 способ преобразования в булеан

console.log(typeof(!!'44444'));    // редко используется, но также преобразует булиновое значение

//----------------------------------------------- LESSON 24 END  ----------------------------------------------------------------


//----------------------------------------------- LESSON 25  ----------------------------------------------------------------

                                //  Задачи из собеседования


// •	Какое будет выведено значение: let x = 5; alert( x++ ); ?
// •	5 !!!

// •	Чему равно такое выражение: [ ] + false - null + true ?
// •	Undefined не правильно NaN

// •	Что выведет этот код: let y = 1; let x = y = 2; alert(x); ?
// •	2

// •	Чему равна сумма [ ] + 1 + 2?
// •	12

// •	Что выведет этот код: alert( "1"[0] )?
// •	1

// •	Чему равно 2 && 1 && null && 0 && undefined ?
// •	false

// •	Есть ли разница между выражениями? !!( a && b ) и (a && b)?
// •	False Boolean

// •	Что выведет этот код: alert( null || 2 && 3 || 4 ); ?
// •	3   приоритет && 3 больше 2, false true(3) замыкание на false; =3

// •	a = [1, 2, 3]; b = [1, 2, 3]; Правда ли что a == b ?
// •	false нет ссылки на массив b

// •	Что выведет этот код: alert( +"Infinity" ); ?
// •	infinity

// •	Верно ли сравнение: "Ёжик" > "яблоко"?
// •	False сравнение по буквам какая стоит раньше 

// •	Чему равно 0 || "" || 2 || undefined || true || falsе ?
// •	2 замыкание на true( false false true(2))

//----------------------------------------------- LESSON 25 END  --------------------------------------------------------------




































